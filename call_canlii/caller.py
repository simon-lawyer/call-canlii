# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_caller.ipynb.

# %% auto 0
__all__ = ['Caller']

# %% ../nbs/00_caller.ipynb 3
import pandas as pd
import requests
import json

# %% ../nbs/00_caller.ipynb 4
class Caller:
    "Enter your APIkey and your preferred language ('en' or 'fr')"
    def __init__(self, APIkey, language):
        self.key = APIKey
        self.language = language
    
    def isolate_id(self, dictionary):
        #used for the list_decisions call
        #some databases return caseId as a language
        try:
            case_id = dictionary[self.language]
        except:
            if self.language == 'en':
                case_id = dictionary['fr']
            else:
                case_id = dictionary['en']
        return case_id    
        
    def list_tribunals(self):
        "No arguments required. Automatically checks CanLii for the latest list of databases."
        res = requests.get(f'https://api.canlii.org/v1/caseBrowse/{self.language}/?api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.DataFrame.from_dict(json_res['caseDatabases'])
        return df
    
    def list_decisions(self, databaseId, offset=0, resultCount=100):
        "Offset: (0 = descending, 1 = ascending)"
        res = requests.get(f'https://api.canlii.org/v1/caseBrowse/{self.language}/{databaseId}/?offset={offset}&resultCount={resultCount}&api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.DataFrame.from_dict(json_res['cases'])
        df['caseId'] = df['caseId'].apply(self.isolate_id)
        df.drop(columns=['databaseId'], inplace=True)
        return df
    
    def case_metadata(self, databaseId, caseId):
        res = requests.get(f'https://api.canlii.org/v1/caseBrowse/{self.language}/{databaseId}/{caseId}/?api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.Series(json_res)
        return df
    
    def case_cites_of_cases(self, databaseId, caseId):
        "Get a list of all the cases your target case cites."
        res = requests.get(f'https://api.canlii.org/v1/caseCitator/en/{databaseId}/{caseId}/citedCases?api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.DataFrame.from_dict(json_res['citedCases'])
        df['caseId'] = df['caseId'].apply(self.isolate_id)
        df.drop(columns=['databaseId'], inplace=True)
        return df
    
    def case_cites_of_legislation(self, databaseId, caseId):
        "Get a list of all the legislation your target case cites."
        res = requests.get(f'https://api.canlii.org/v1/caseCitator/en/{databaseId}/{caseId}/citedLegislations?api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.DataFrame.from_dict(json_res['citedLegislations'])
        return df
    
    def cites_of_case(self, databaseId, caseId):
        "Get a list of all the cases that cite your target case."
        res = requests.get(f'https://api.canlii.org/v1/caseCitator/en/{databaseId}/{caseId}/citingCases?api_key={self.key}')
        json_res = json.loads(res.text)
        df = pd.DataFrame.from_dict(json_res['citingCases'])
        df['caseId'] = df['caseId'].apply(self.isolate_id)
        df.drop(columns=['databaseId'], inplace=True)
        return df
